// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file hoge/v1/hoge.proto (package hoge.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * GetHoge
 *
 * @generated from message hoge.v1.HogeGetRequest
 */
export class HogeGetRequest extends Message<HogeGetRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<HogeGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "hoge.v1.HogeGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HogeGetRequest {
    return new HogeGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HogeGetRequest {
    return new HogeGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HogeGetRequest {
    return new HogeGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HogeGetRequest | PlainMessage<HogeGetRequest> | undefined, b: HogeGetRequest | PlainMessage<HogeGetRequest> | undefined): boolean {
    return proto3.util.equals(HogeGetRequest, a, b);
  }
}

/**
 * @generated from message hoge.v1.HogeGetResponse
 */
export class HogeGetResponse extends Message<HogeGetResponse> {
  /**
   * @generated from field: optional hoge.v1.Hoge hoge = 1;
   */
  hoge?: Hoge;

  constructor(data?: PartialMessage<HogeGetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "hoge.v1.HogeGetResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hoge", kind: "message", T: Hoge, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HogeGetResponse {
    return new HogeGetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HogeGetResponse {
    return new HogeGetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HogeGetResponse {
    return new HogeGetResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HogeGetResponse | PlainMessage<HogeGetResponse> | undefined, b: HogeGetResponse | PlainMessage<HogeGetResponse> | undefined): boolean {
    return proto3.util.equals(HogeGetResponse, a, b);
  }
}

/**
 * CreateHoge
 *
 * @generated from message hoge.v1.HogeCreateRequest
 */
export class HogeCreateRequest extends Message<HogeCreateRequest> {
  /**
   * @generated from field: hoge.v1.Hoge hoge = 1;
   */
  hoge?: Hoge;

  constructor(data?: PartialMessage<HogeCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "hoge.v1.HogeCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hoge", kind: "message", T: Hoge },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HogeCreateRequest {
    return new HogeCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HogeCreateRequest {
    return new HogeCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HogeCreateRequest {
    return new HogeCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HogeCreateRequest | PlainMessage<HogeCreateRequest> | undefined, b: HogeCreateRequest | PlainMessage<HogeCreateRequest> | undefined): boolean {
    return proto3.util.equals(HogeCreateRequest, a, b);
  }
}

/**
 * @generated from message hoge.v1.HogeCreateResponse
 */
export class HogeCreateResponse extends Message<HogeCreateResponse> {
  /**
   * @generated from field: hoge.v1.Hoge hoge = 1;
   */
  hoge?: Hoge;

  constructor(data?: PartialMessage<HogeCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "hoge.v1.HogeCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hoge", kind: "message", T: Hoge },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HogeCreateResponse {
    return new HogeCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HogeCreateResponse {
    return new HogeCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HogeCreateResponse {
    return new HogeCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HogeCreateResponse | PlainMessage<HogeCreateResponse> | undefined, b: HogeCreateResponse | PlainMessage<HogeCreateResponse> | undefined): boolean {
    return proto3.util.equals(HogeCreateResponse, a, b);
  }
}

/**
 * @generated from message hoge.v1.Hoge
 */
export class Hoge extends Message<Hoge> {
  /**
   * @generated from field: hoge.v1.Fuga fuga = 1;
   */
  fuga?: Fuga;

  constructor(data?: PartialMessage<Hoge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "hoge.v1.Hoge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fuga", kind: "message", T: Fuga },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Hoge {
    return new Hoge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Hoge {
    return new Hoge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Hoge {
    return new Hoge().fromJsonString(jsonString, options);
  }

  static equals(a: Hoge | PlainMessage<Hoge> | undefined, b: Hoge | PlainMessage<Hoge> | undefined): boolean {
    return proto3.util.equals(Hoge, a, b);
  }
}

/**
 * @generated from message hoge.v1.Fuga
 */
export class Fuga extends Message<Fuga> {
  /**
   * @generated from field: string piyo = 1;
   */
  piyo = "";

  constructor(data?: PartialMessage<Fuga>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "hoge.v1.Fuga";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "piyo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Fuga {
    return new Fuga().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Fuga {
    return new Fuga().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Fuga {
    return new Fuga().fromJsonString(jsonString, options);
  }

  static equals(a: Fuga | PlainMessage<Fuga> | undefined, b: Fuga | PlainMessage<Fuga> | undefined): boolean {
    return proto3.util.equals(Fuga, a, b);
  }
}

